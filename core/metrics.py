
"""
import matplotlib.pyplot as plt
import os
import pandas as pd

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
os.chdir(os.path.dirname(os.path.dirname(__file__)))


# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
RESULTS_DIR = "results"
TRADES_DIR = os.path.join(RESULTS_DIR, "trades")
TRADE_PLOTS_DIR = os.path.join(RESULTS_DIR, "trade_plots")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–π–¥–æ–≤
os.makedirs(TRADE_PLOTS_DIR, exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
historical_data = pd.read_parquet("data/historical_data.parquet")
historical_data.columns = historical_data.columns.str.lower()
historical_data['open_time'] = pd.to_datetime(historical_data['open_time'], unit='ms')
historical_data = historical_data.set_index(['open_time', 'symbol']).sort_index()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞

def plot_trades_for_symbol(symbol, trades_df, price_df, strategy_name):
    if price_df.empty or trades_df.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –≤ {strategy_name.upper()}.")
        return

    plt.figure(figsize=(14, 8))
    plt.plot(price_df.index, price_df.values, label='Close Price', color='blue')

    # –û—Ç–º–µ—Ç–∏–º –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã
    entries = trades_df['Entry Timestamp']
    exits = trades_df['Exit Timestamp']
    entry_prices = trades_df['Avg Entry Price']
    exit_prices = trades_df['Avg Exit Price']

    plt.scatter(entries, entry_prices, color='green', label='Entry', marker='^', s=100)
    plt.scatter(exits, exit_prices, color='red', label='Exit', marker='v', s=100)

    plt.title(f"–¢—Ä–µ–π–¥—ã –ø–æ {symbol} ({strategy_name.upper()})")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞")
    plt.legend()
    plt.grid(True)

    save_path = os.path.join(TRADE_PLOTS_DIR, f"{strategy_name}_{symbol}_trades.png")
    plt.tight_layout()
    plt.savefig(save_path)
    plt.close()
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–π–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
strategies = ["sma", "rsi", "vwap"]

for strategy in strategies:
    trades_path = os.path.join(TRADES_DIR, f"{strategy}_trades.csv")
    if not os.path.exists(trades_path):
        print(f"‚ùå –§–∞–π–ª —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {strategy.upper()}: {trades_path}")
        continue

    trades_df = pd.read_csv(trades_path)

    if trades_df.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è {strategy.upper()}.")
        continue

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏
    top_symbols = trades_df.groupby('Column')['Return'].sum().sort_values(ascending=False).head(5).index

    for symbol in top_symbols:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
        symbol_trades = trades_df[trades_df['Column'] == symbol]

        # –ë–µ—Ä–µ–º —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã
        try:
            close_prices = historical_data.xs(symbol, level='symbol')['close']
        except KeyError:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–µ –¥–ª—è {symbol}")
            continue

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_trades_for_symbol(symbol, symbol_trades, close_prices, strategy)

print("\nüèÅ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–π–¥–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã!")
"""


import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import webbrowser

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
os.chdir(os.path.dirname(os.path.dirname(__file__)))

# === –ü—É—Ç–∏ ===
RESULTS_DIR = "results"
TRADES_DIR = os.path.join(RESULTS_DIR, "trades")
CASH_DIR = os.path.join(RESULTS_DIR, "cash")
SCREENSHOTS_DIR = os.path.join(RESULTS_DIR, "screenshots")
REPORT_PATH = os.path.join(RESULTS_DIR, "report.html")

os.makedirs(RESULTS_DIR, exist_ok=True)
os.makedirs(SCREENSHOTS_DIR, exist_ok=True)

# === –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞) ===
strategies = ["sma", "rsi", "vwap"]

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ ===
metrics_list = []

for strat in strategies:
    stats_path = os.path.join(RESULTS_DIR, f"{strat}_stats.csv")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ {stats_path}?")

    if not os.path.exists(stats_path):
        print(f"‚ùå –§–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω: {stats_path}")
        continue

    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {stats_path}")
    stats = pd.read_csv(stats_path, index_col=0).T
    stats["Strategy"] = strat

    for col in stats.columns:
        if col != "Strategy":
            stats[col] = pd.to_numeric(stats[col], errors="coerce")

    metrics_list.append(stats)

if not metrics_list:
    print("‚ùå –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
    exit()

metrics = pd.concat(metrics_list)

# === HTML –±–ª–æ–∫–∏ ===
html_parts = []

html_parts.append("""
<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<title>üìà –û—Ç—á–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º</title>
<style>
body { font-family: Arial, sans-serif; margin: 20px; }
h1, h2 { color: #2c3e50; }
table { border-collapse: collapse; width: 100%; margin-bottom: 40px; }
th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
th { background-color: #4CAF50; color: white; }
tr:nth-child(even) { background-color: #f2f2f2; }
.metric-best { background-color: #c8e6c9; font-weight: bold; }
.download-btn {
    display: inline-block;
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    font-size: 18px;
    text-decoration: none;
    border-radius: 5px;
    margin-bottom: 30px;
}
</style>
</head>
<body>
""")

html_parts.append('<h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</h1>')
html_parts.append(f'<a href="{os.path.basename(REPORT_PATH)}" download class="download-btn">üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç</a>')

# === 1. Equity Curve ===
html_parts.append("<h2>1. Equity Curve –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º</h2>")

fig = go.Figure()

for strat in strategies:
    cash_path = os.path.join(CASH_DIR, f"{strat}_cash.csv")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞: {cash_path}")
    if not os.path.exists(cash_path):
        print(f"‚õî –ù–µ—Ç –∫–µ—à-—Ñ–∞–π–ª–∞ –¥–ª—è {strat.upper()} –ø–æ –ø—É—Ç–∏: {cash_path}")
        continue

    df = pd.read_csv(cash_path, index_col=0, parse_dates=True)

    if df.empty:
        print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∫–µ—à-—Ñ–∞–π–ª –¥–ª—è {strat.upper()}")
        continue

    if isinstance(df, pd.DataFrame) and df.shape[1] == 1:
        series = df.iloc[:, 0]
    elif isinstance(df.columns, pd.MultiIndex):
        series = df.sum(axis=1)
    else:
        series = df.squeeze()

    series = pd.to_numeric(series, errors="coerce").dropna()

    if series.empty:
        print(f"‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å–µ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {strat.upper()}")
        continue

    fig.add_trace(go.Scatter(
        x=series.index,
        y=series.values,
        mode="lines",
        name=f"{strat.upper()} Strategy"
    ))

    # === –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Å–∫—Ä–∏–Ω—à–æ—Ç ===
    screenshot_path = os.path.join(SCREENSHOTS_DIR, f"strategy{strategies.index(strat)+1}_equity.png")
    fig.write_image(screenshot_path, width=1000, height=500)
    print(f"üñº –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {screenshot_path}")

fig.update_layout(
    title="Equity Curve –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º",
    xaxis_title="–î–∞—Ç–∞",
    yaxis_title="–ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è",
    height=500,
    yaxis=dict(tickformat=".0f")
)

html_parts.append(fig.to_html(full_html=False, include_plotlyjs=True))

# === 2. Heatmap –ø–æ Total Return ===
html_parts.append("<h2>2. Heatmap –ø–æ Total Return [%]</h2>")

pivot = metrics.pivot_table(values="Total Return [%]", index="Strategy")

plt.figure(figsize=(8, 3))
sns.heatmap(pivot, annot=True, cmap="coolwarm", fmt=".2f")
heatmap_path = os.path.join(RESULTS_DIR, "heatmap.png")
plt.title("Total Return [%] –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
plt.tight_layout()
plt.savefig(heatmap_path)
plt.close()

html_parts.append(f'<img src="heatmap.png" style="width:600px;">')


# === 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ===
html_parts.append("<h2>3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º</h2>")

avg_metrics = metrics.groupby("Strategy").mean()
styled_table = avg_metrics.round(2).astype("object").copy()

for col in ["Total Return [%]", "Win Rate [%]", "Profit Factor"]:
    if col in avg_metrics.columns:
        best_strategy = avg_metrics[col].idxmax()
        styled_table.loc[best_strategy, col] = f'<td class="metric-best">{styled_table.loc[best_strategy, col]}</td>'

for col in ["Max Drawdown [%]"]:
    if col in avg_metrics.columns:
        best_strategy = avg_metrics[col].idxmin()
        styled_table.loc[best_strategy, col] = f'<td class="metric-best">{styled_table.loc[best_strategy, col]}</td>'

table_html = "<table><tr><th>Strategy</th>"
for col in styled_table.columns:
    table_html += f"<th>{col}</th>"
table_html += "</tr>"

for idx, row in styled_table.iterrows():
    table_html += f"<tr><td>{idx}</td>"
    for col in styled_table.columns:
        cell = row[col]
        if isinstance(cell, str) and 'class="metric-best"' in cell:
            table_html += cell
        else:
            table_html += f"<td>{cell}</td>"
    table_html += "</tr>"
table_html += "</table>"

html_parts.append(table_html)

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
html_parts.append("</body></html>")

with open(REPORT_PATH, "w", encoding="utf-8") as f:
    f.write(''.join(html_parts))

print(f"‚úÖ HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {REPORT_PATH}")
webbrowser.open('file://' + os.path.realpath(REPORT_PATH))


