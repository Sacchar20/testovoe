"""import pandas as pd
import os
import matplotlib.pyplot as plt

def run_strategy_on_all_pairs(strategy_class, data_dict):
    results = []

    for symbol, df in data_dict.items():
        try:
            strat = strategy_class(df)
            strat.run_backtest()
            metrics = strat.get_metrics()
            metrics['Symbol'] = symbol
            results.append(metrics)

            # üîΩ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
            portfolio_dir = "results/portfolios"
            os.makedirs(portfolio_dir, exist_ok=True)
            pf_filename = f"{portfolio_dir}/{symbol.lower()}_{strategy_class.__name__.lower()}.pkl"
            strat.portfolio.save(pf_filename)

        except Exception as e:
            print(f"[ERROR] {symbol}: {e}")

    if results:
        return pd.DataFrame(results).set_index('Symbol')
    else:
        print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ.")
        return pd.DataFrame()




def save_results(df, filename):
    os.makedirs("..", exist_ok=True)
    df.to_csv(f"results/{filename}.csv")


def plot_equity(pf, filename):
    fig = pf.plot()
    fig.update_layout(title=filename)
    fig.write_image(f"results/{filename}.png")  # ‚Üê —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PNG
"""




# backtester.py (–æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–¥ –º—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç)
import os
import pandas as pd
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import vectorbt as vbt

def run_multi_strategy(strategy_class, df, position_size=0.01):
    """
    df ‚Äî MultiIndex –ø–æ —Å—Ç—Ä–æ–∫–∞–º: (open_time, symbol)
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ MultiIndex –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º: (field, symbol)
    """
    # –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º symbol —Å –∏–Ω–¥–µ–∫—Å–∞ –≤ –∫–æ–ª–æ–Ω–∫–∏
    df_wide = df.unstack('symbol')  # => MultiIndex columns: (field, symbol)

    strategy = strategy_class(df_wide, position_size=position_size)
    strategy.run_backtest()

    return strategy.portfolio



def save_results(stats_df, filename):
    os.makedirs("results", exist_ok=True)
    stats_df.to_csv(f"results/{filename}.csv")


def plot_equity(pf, filename):
    equity = pf.asset_value()
    fig = go.Figure()

    if isinstance(equity, pd.DataFrame):
        for col in equity.columns:
            fig.add_trace(go.Scatter(x=equity.index, y=equity[col], mode='lines', name=str(col)))
    else:
        fig.add_trace(go.Scatter(x=equity.index, y=equity, mode='lines', name='Equity'))

    fig.update_layout(title=f"Equity Curve ‚Äî {filename}", xaxis_title='Date', yaxis_title='Equity')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    try:
        fig.write_image(f"results/{filename}.png")
    except ValueError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ equity –¥–ª—è {filename}: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç 'kaleido'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: pip install -U kaleido")




