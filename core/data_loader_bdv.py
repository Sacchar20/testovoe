import os
import requests
import zipfile
import pandas as pd
from io import BytesIO
from binance.client import Client
from tqdm import tqdm
import logging

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_KEY = ""
API_SECRET = ""

MONTH = "2025-02"
INTERVAL = "1m"
BASE_URL = "https://data.binance.vision/data/spot/monthly/klines"
TEMP_DIR = "temp_downloads"
OUTPUT_PARQUET = "../data/historic_data.parquet"
TOP_N = 100
LOG_FILE = "../../data_download.log"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)

# === Binance API: –ø–æ–ª—É—á–∏—Ç—å BTC-–ø–∞—Ä—ã ===
def get_btc_pairs():
    client = Client(API_KEY, API_SECRET)
    info = client.get_exchange_info()
    btc_pairs = [s['symbol'] for s in info['symbols'] if s['quoteAsset'] == 'BTC' and s['status'] == 'TRADING']
    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(btc_pairs)} BTC-–ø–∞—Ä")
    return btc_pairs

# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
def download_and_extract(symbol):
    zip_filename = f"{symbol}-{INTERVAL}-{MONTH}.zip"
    local_zip_path = os.path.join(TEMP_DIR, zip_filename)

    if os.path.exists(local_zip_path):
        logging.info(f"üì¶ –ö–µ—à –Ω–∞–π–¥–µ–Ω: {zip_filename}")
    else:
        url = f"{BASE_URL}/{symbol}/{INTERVAL}/{zip_filename}"
        try:
            logging.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º: {url}")
            response = requests.get(url, timeout=20)
            response.raise_for_status()
            with open(local_zip_path, "wb") as f:
                f.write(response.content)
            logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {local_zip_path}")
        except Exception as e:
            logging.warning(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ‚Äî {e}")
            return None

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ CSV
    try:
        with zipfile.ZipFile(local_zip_path, 'r') as zf:
            extracted_file = zf.namelist()[0]
            zf.extractall(TEMP_DIR)
            return os.path.join(TEMP_DIR, extracted_file)
    except Exception as e:
        logging.error(f"‚ùå {symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ‚Äî {e}")
        return None

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ CSV –≤ DataFrame ===
def process_csv(filepath, symbol):
    df = pd.read_csv(filepath, header=None)
    df.columns = [
        "open_time", "open", "high", "low", "close", "volume",
        "close_time", "quote_asset_volume", "number_of_trades",
        "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
    ]
    df["symbol"] = symbol
    df = df.drop(columns=["ignore"])

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–∞—Ö
    if df['open_time'].max() > 1e15:
        df['open_time'] = df['open_time'] // 1_000_000
        df['close_time'] = df['close_time'] // 1_000_000
        logging.info(f"{symbol}: –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∏–∑ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã")

    return df


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def download_btc_data():
    os.makedirs(TEMP_DIR, exist_ok=True)
    os.makedirs(os.path.dirname(OUTPUT_PARQUET), exist_ok=True)

    symbols = get_btc_pairs()
    pair_data = {}
    volumes = {}

    for symbol in tqdm(symbols, desc="–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞"):
        path = download_and_extract(symbol)
        if not path:
            continue

        df = process_csv(path, symbol)
        if df.empty:
            continue

        volume = df["volume"].astype(float).sum()
        volumes[symbol] = volume
        pair_data[symbol] = df

    # –¢–æ–ø –ø–æ –æ–±—ä—ë–º—É
    top_symbols = sorted(volumes, key=volumes.get, reverse=True)[:TOP_N]
    logging.info(f"üìà –¢–æ–ø-{TOP_N} –ø–æ –æ–±—ä—ë–º—É: {top_symbols}")

    top_dfs = [pair_data[s] for s in top_symbols if s in pair_data]
    if top_dfs:
        final_df = pd.concat(top_dfs)
        final_df.to_parquet(OUTPUT_PARQUET, engine="pyarrow", compression="snappy")
        logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {OUTPUT_PARQUET}")
    else:
        logging.warning("‚ùå –ù–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

# === –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é ===
if __name__ == "__main__":
    download_btc_data()
