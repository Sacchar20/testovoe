"""
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

RESULTS_DIR = "../results"
SCREENSHOTS_DIR = os.path.join(RESULTS_DIR, "screenshots")

os.makedirs(SCREENSHOTS_DIR, exist_ok=True)

# ===== –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ =====
strategies = {
    "sma": "sma_stats.csv",
    "rsi": "rsi_stats.csv",
    "vwap": "vwap_stats.csv"
}

all_metrics = []

for name, filename in strategies.items():
    path = os.path.join(RESULTS_DIR, filename)
    if not os.path.isfile(path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        continue

    df = pd.read_csv(path)  # –£–±–∏—Ä–∞–µ–º index_col="Symbol"
    df["strategy"] = name
    all_metrics.append(df)

# ===== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π =====
if all_metrics:
    combined = pd.concat(all_metrics, ignore_index=True)

    # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    avg = combined.groupby("strategy").mean(numeric_only=True)
    avg.to_csv(os.path.join(RESULTS_DIR, "metrics_summary.csv"))

    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
    plt.figure(figsize=(10, 6))
    sns.heatmap(avg, annot=True, fmt=".2f", cmap="coolwarm")
    plt.title("–°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    plt.tight_layout()
    plt.savefig(os.path.join(SCREENSHOTS_DIR, "strategy_metrics_heatmap.png"))
    plt.close()

    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
else:
    print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
"""


import matplotlib.pyplot as plt
import os
import pandas as pd

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
os.chdir(os.path.dirname(os.path.dirname(__file__)))


# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
RESULTS_DIR = "results"
TRADES_DIR = os.path.join(RESULTS_DIR, "trades")
TRADE_PLOTS_DIR = os.path.join(RESULTS_DIR, "trade_plots")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–π–¥–æ–≤
os.makedirs(TRADE_PLOTS_DIR, exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
historical_data = pd.read_parquet("data/historical_data.parquet")
historical_data.columns = historical_data.columns.str.lower()
historical_data['open_time'] = pd.to_datetime(historical_data['open_time'], unit='ms')
historical_data = historical_data.set_index(['open_time', 'symbol']).sort_index()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞

def plot_trades_for_symbol(symbol, trades_df, price_df, strategy_name):
    if price_df.empty or trades_df.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –≤ {strategy_name.upper()}.")
        return

    plt.figure(figsize=(14, 8))
    plt.plot(price_df.index, price_df.values, label='Close Price', color='blue')

    # –û—Ç–º–µ—Ç–∏–º –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã
    entries = trades_df['Entry Timestamp']
    exits = trades_df['Exit Timestamp']
    entry_prices = trades_df['Avg Entry Price']
    exit_prices = trades_df['Avg Exit Price']

    plt.scatter(entries, entry_prices, color='green', label='Entry', marker='^', s=100)
    plt.scatter(exits, exit_prices, color='red', label='Exit', marker='v', s=100)

    plt.title(f"–¢—Ä–µ–π–¥—ã –ø–æ {symbol} ({strategy_name.upper()})")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶–µ–Ω–∞")
    plt.legend()
    plt.grid(True)

    save_path = os.path.join(TRADE_PLOTS_DIR, f"{strategy_name}_{symbol}_trades.png")
    plt.tight_layout()
    plt.savefig(save_path)
    plt.close()
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–π–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
strategies = ["sma", "rsi", "vwap"]

for strategy in strategies:
    trades_path = os.path.join(TRADES_DIR, f"{strategy}_trades.csv")
    if not os.path.exists(trades_path):
        print(f"‚ùå –§–∞–π–ª —Ç—Ä–µ–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {strategy.upper()}: {trades_path}")
        continue

    trades_df = pd.read_csv(trades_path)

    if trades_df.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è {strategy.upper()}.")
        continue

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏
    top_symbols = trades_df.groupby('Column')['Return'].sum().sort_values(ascending=False).head(5).index

    for symbol in top_symbols:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–π–¥—ã –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
        symbol_trades = trades_df[trades_df['Column'] == symbol]

        # –ë–µ—Ä–µ–º —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã
        try:
            close_prices = historical_data.xs(symbol, level='symbol')['close']
        except KeyError:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–µ –¥–ª—è {symbol}")
            continue

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_trades_for_symbol(symbol, symbol_trades, close_prices, strategy)

print("\nüèÅ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–π–¥–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã!")


