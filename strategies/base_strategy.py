"""from abc import ABC, abstractmethod
import vectorbt as vbt


class StrategyBase(ABC):
    def __init__(self, data):
        self.data = data
        self.portfolio = None

    @abstractmethod
    def generate_signals(self):
        pass

    def run_backtest(self):
        price = self.data['close']
        entries, exits = self.generate_signals()

        # –î–æ–±–∞–≤–∏–º –∑–∞–¥–µ—Ä–∂–∫—É (–µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
        entries = entries.shift(1, fill_value=False)
        exits = exits.shift(1, fill_value=False)

        self.portfolio = vbt.Portfolio.from_signals(
            price,
            entries=entries,
            exits=exits,
            init_cash=1000.0,
            size_type='percent',  # üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ª—é –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            size=0.10,  # üîí –¢–æ–ª—å–∫–æ 10% –Ω–∞ —Å–¥–µ–ª–∫—É
            fees=0.001,
            slippage=0.005,
            freq="1min"
        )

    def get_metrics(self):
        if self.portfolio is None:
            raise RuntimeError("run_backtest must be called first")
        stats = self.portfolio.stats()

        def safe_get(key):
            return stats[key] if key in stats else None


        return {
            "Total Return (%)": safe_get("Total Return [%]"),
            "Sharpe Ratio": safe_get("Sharpe Ratio"),
            "Max Drawdown (%)": safe_get("Max Drawdown [%]"),
            "Win Rate (%)": safe_get("Win Rate [%]"),
            "Expectancy": safe_get("Expectancy"),
            "Total Trades": safe_get("Total Trades")
        }
"""



from abc import ABC, abstractmethod
import vectorbt as vbt


class StrategyBase(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

    –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ generate_signals().
    –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±—ç–∫—Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é run_backtest(),
    –∏ –∑–∞—Ç–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é get_metrics().
    """

    def __init__(self, data, position_size=0.01):
        """
        Args:
            data (pd.DataFrame): –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –º—É–ª—å—Ç–∏–∫–æ–ª–æ–Ω–∫–∞–º–∏ (—É—Ä–æ–≤–µ–Ω—å 0: 'close', 'volume', –∏ —Ç.–¥., —É—Ä–æ–≤–µ–Ω—å 1: symbol).
            position_size (float): –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.01 –¥–ª—è 1%).
        """
        self.data = data
        self.portfolio = None
        self.position_size = position_size

    @abstractmethod
    def generate_signals(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞.

        Returns:
            Tuple[pd.DataFrame, pd.DataFrame]: entries –∏ exits ‚Äî –±—É–ª–µ–≤—ã DataFrame –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ñ–æ—Ä–º—ã, –≥–¥–µ True = —Å–∏–≥–Ω–∞–ª.
        """
        pass

    def run_backtest(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤.

        –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç vectorbt.Portfolio –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ self.portfolio.
        """
        price = self.data.xs('close', axis=1, level=0)
        entries, exits = self.generate_signals()

        entries = entries.fillna(False)
        exits = exits.fillna(False)

        if not entries.any().any() and not exits.any().any():
            print("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
            self.portfolio = None
            return

        entries = entries.shift(1, fill_value=False)
        exits = exits.shift(1, fill_value=False)

        self.portfolio = vbt.Portfolio.from_signals(
            price,
            entries,
            exits,
            init_cash=10_000,
            size_type='percent',
            size=self.position_size,
            fees=0.001,
            slippage=0.001,
            freq="1min",
            cash_sharing=True
        )

    def get_metrics(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

        Returns:
            dict: –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è, –≤–∫–ª—é—á–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, Sharpe, –ø—Ä–æ—Å–∞–¥–∫—É –∏ —Ç.–¥.

        Raises:
            RuntimeError: –ï—Å–ª–∏ run_backtest –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω.
        """
        if self.portfolio is None:
            raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å run_backtest")

        stats = self.portfolio.stats()
        return {
            "Total Return (%)": stats.loc["Total Return [%]"],
            "Sharpe Ratio": stats.loc["Sharpe Ratio"],
            "Max Drawdown (%)": stats.loc["Max Drawdown [%]"],
            "Win Rate (%)": stats.loc["Win Rate [%]"],
            "Expectancy": stats.loc["Expectancy"],
            "Total Trades": stats.loc["Total Trades"]
        }

