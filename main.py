"""# run_backtests.py




from strategies.sma import SmaCrossoverStrategy
from strategies.RSI import RsiBbStrategy
from strategies.WRAP import VwapReversionStrategy
from core.backtester import run_strategy_on_all_pairs
import pandas as pd
import os

def main():
    os.makedirs("results", exist_ok=True)  # ‚úÖ —Å–æ–∑–¥–∞—ë—Ç results/, –µ—Å–ª–∏ –Ω–µ—Ç

    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = pd.read_parquet("data/historical_data.parquet")
    df.columns = df.columns.str.lower()  # ‚úÖ lowercase –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ


    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É
    data = {
        symbol: group.assign(open_time=pd.to_datetime(group['open_time'], unit='ms')).set_index('open_time')
        for symbol, group in df.groupby("symbol")
    }

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n")

     # ========== SMA Crossover ==========
    print("üöÄ –ó–∞–ø—É—Å–∫ SMA Crossover...")
    sma_results = run_strategy_on_all_pairs(SmaCrossoverStrategy, data)
    sma_results.to_csv("results/sma_results.csv")
    print("üìà –¢–æ–ø-10 –ø–∞—Ä –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (SMA):")
    print(sma_results["Total Return (%)"].sort_values(ascending=False).head(10))
    print("‚úÖ SMA Crossover –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
    #
    # ========== RSI + BB ==========
    print("üöÄ –ó–∞–ø—É—Å–∫ RSI + Bollinger Bands...")
    rsi_results = run_strategy_on_all_pairs(RsiBbStrategy, data)
    rsi_results.to_csv("results/rsi_bb_results.csv")
    print("üìà –¢–æ–ø-10 –ø–∞—Ä –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (RSI + BB):")
    print(rsi_results["Total Return (%)"].sort_values(ascending=False).head(10))
    print("‚úÖ RSI + BB –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    # ========== VWAP Reversion ==========
    print("üöÄ –ó–∞–ø—É—Å–∫ VWAP Reversion...")
    vwap_results = run_strategy_on_all_pairs(VwapReversionStrategy, data)
    vwap_results.to_csv("results/vwap_results.csv")
    print("üìà –¢–æ–ø-10 –ø–∞—Ä –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (VWAP):")
    print(vwap_results["Total Return (%)"].sort_values(ascending=False).head(10))
    print("‚úÖ VWAP Reversion –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    print("\nüèÅ –í—Å–µ –±–µ–∫—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/")

if __name__ == "__main__":
    main()
"""


import os
import pandas as pd
from strategies.sma import SmaCrossoverStrategy
from strategies.RSI import RsiBbStrategy
from strategies.WRAP import VwapReversionStrategy
from core.backtester import run_multi_strategy, plot_equity

def collect_stats_by_symbol(pf, filename_prefix: str):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

    Args:
        pf (vbt.Portfolio): –ü–æ—Ä—Ç—Ñ–µ–ª—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        filename_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    if pf is None:
        print(f"‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {filename_prefix.upper()} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
        return

    stats = pf.stats()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.to_csv(f"results/{filename_prefix}_stats.csv")

    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-10 –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    if "Total Return [%]" in stats.index:
        print(f"\nüìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ({filename_prefix.upper()}): {stats['Total Return [%]']:.2f}%")
        print(f"\nüìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {filename_prefix.upper()}:")
        print(stats.round(2))
    else:
        print(f"\n‚ö†Ô∏è –í stats –Ω–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ 'Total Return [%]'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {stats.index.tolist()}")

def save_trades(pf, filename_prefix: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–¥–µ–ª–∫–∏ (trades) –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ CSV-—Ñ–∞–π–ª.

    Args:
        pf (vbt.Portfolio): –ü–æ—Ä—Ç—Ñ–µ–ª—å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        filename_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤.
    """
    if pf is None:
        print(f"‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è {filename_prefix.upper()} –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç—Ä–µ–π–¥—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
        return

    trades_df = pf.trades.records_readable
    os.makedirs("results/trades", exist_ok=True)  # –ü–∞–ø–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥–æ–≤
    trades_df.to_csv(f"results/trades/{filename_prefix}_trades.csv", index=False)
    print(f"üíæ –¢—Ä–µ–π–¥—ã –¥–ª—è {filename_prefix.upper()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results/trades/{filename_prefix}_trades.csv")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SMA, RSI+BB –∏ VWAP,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    os.makedirs("results", exist_ok=True)

    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = pd.read_parquet("data/historical_data.parquet")
    df.columns = df.columns.str.lower()
    df['open_time'] = pd.to_datetime(df['open_time'], unit='ms')
    df = df.set_index(['open_time', 'symbol']).sort_index()

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {df.index.get_level_values('symbol').nunique()} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n")

    # ====== SMA ======
    print("üöÄ –ó–∞–ø—É—Å–∫ SMA Crossover...")
    sma_pf = run_multi_strategy(SmaCrossoverStrategy, df)
    collect_stats_by_symbol(sma_pf, "sma")
    save_trades(sma_pf, "sma")
    print("‚úÖ SMA Crossover –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    # ====== RSI ======
    print("üöÄ –ó–∞–ø—É—Å–∫ RSI + BB...")
    rsi_pf = run_multi_strategy(RsiBbStrategy, df)
    collect_stats_by_symbol(rsi_pf, "rsi")
    save_trades(rsi_pf, "rsi")
    print("‚úÖ RSI + BB –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    # ====== VWAP ======
    print("üöÄ –ó–∞–ø—É—Å–∫ VWAP Reversion...")
    vwap_pf = run_multi_strategy(VwapReversionStrategy, df)
    collect_stats_by_symbol(vwap_pf, "vwap")
    save_trades(vwap_pf, "vwap")
    print("‚úÖ VWAP Reversion –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    print("\nüèÅ –í—Å–µ –±—ç–∫—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/")

if __name__ == "__main__":
    main()



