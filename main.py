"""# run_backtests.py




from strategies.sma import SmaCrossoverStrategy
from strategies.RSI import RsiBbStrategy
from strategies.WRAP import VwapReversionStrategy
from core.backtester import run_strategy_on_all_pairs
import pandas as pd
import os

def main():
    os.makedirs("results", exist_ok=True)  # ‚úÖ —Å–æ–∑–¥–∞—ë—Ç results/, –µ—Å–ª–∏ –Ω–µ—Ç

    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = pd.read_parquet("data/historical_data.parquet")
    df.columns = df.columns.str.lower()  # ‚úÖ lowercase –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ


    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É
    data = {
        symbol: group.assign(open_time=pd.to_datetime(group['open_time'], unit='ms')).set_index('open_time')
        for symbol, group in df.groupby("symbol")
    }

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n")

     # ========== SMA Crossover ==========
    print("üöÄ –ó–∞–ø—É—Å–∫ SMA Crossover...")
    sma_results = run_strategy_on_all_pairs(SmaCrossoverStrategy, data)
    sma_results.to_csv("results/sma_results.csv")
    print("üìà –¢–æ–ø-10 –ø–∞—Ä –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (SMA):")
    print(sma_results["Total Return (%)"].sort_values(ascending=False).head(10))
    print("‚úÖ SMA Crossover –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
    #
    # ========== RSI + BB ==========
    print("üöÄ –ó–∞–ø—É—Å–∫ RSI + Bollinger Bands...")
    rsi_results = run_strategy_on_all_pairs(RsiBbStrategy, data)
    rsi_results.to_csv("results/rsi_bb_results.csv")
    print("üìà –¢–æ–ø-10 –ø–∞—Ä –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (RSI + BB):")
    print(rsi_results["Total Return (%)"].sort_values(ascending=False).head(10))
    print("‚úÖ RSI + BB –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    # ========== VWAP Reversion ==========
    print("üöÄ –ó–∞–ø—É—Å–∫ VWAP Reversion...")
    vwap_results = run_strategy_on_all_pairs(VwapReversionStrategy, data)
    vwap_results.to_csv("results/vwap_results.csv")
    print("üìà –¢–æ–ø-10 –ø–∞—Ä –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (VWAP):")
    print(vwap_results["Total Return (%)"].sort_values(ascending=False).head(10))
    print("‚úÖ VWAP Reversion –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

    print("\nüèÅ –í—Å–µ –±–µ–∫—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ results/")

if __name__ == "__main__":
    main()
"""

import os
import pandas as pd
import logging
from strategies import STRATEGIES
from core.backtester import run_multi_strategy

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def collect_stats_by_symbol(pf, filename_prefix: str):
    if pf is None:
        print(f"‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {filename_prefix.upper()} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
        return

    stats = pf.stats()
    stats.to_csv(f"results/{filename_prefix}_stats.csv")

    if "Total Return [%]" in stats.index:
        print(f"\nüìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ({filename_prefix.upper()}): {stats['Total Return [%]']:.2f}%")
        print(f"\nüìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {filename_prefix.upper()}:")
        print(stats.round(2))
    else:
        print(f"\n‚ö†Ô∏è –í stats –Ω–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ 'Total Return [%]'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {stats.index.tolist()}")


def save_trades(pf, filename_prefix: str):
    if pf is None:
        print(f"‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è {filename_prefix.upper()} –Ω–µ —Å–æ–∑–¥–∞–Ω, —Ç—Ä–µ–π–¥—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
        return

    trades_df = pf.trades.records_readable
    os.makedirs("results/trades", exist_ok=True)
    trades_df.to_csv(f"results/trades/{filename_prefix}_trades.csv", index=False)
    print(f"üíæ –¢—Ä–µ–π–¥—ã –¥–ª—è {filename_prefix.upper()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results/trades/{filename_prefix}_trades.csv")


def load_data():
    path = "data/historic_data.parquet"

    try:
        df = pd.read_parquet(path)
    except FileNotFoundError:
        raise FileNotFoundError(f"‚ùå –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    expected_columns = ["open_time", "symbol"]
    for col in expected_columns:
        if col not in df.columns:
            raise ValueError(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DataFrame")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º open_time –≤ datetime (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    df["open_time"] = pd.to_datetime(df["open_time"], errors="coerce")

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∞
    df = df.dropna(subset=["open_time", "symbol"])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MultiIndex
    df = df.set_index(["open_time", "symbol"]).sort_index()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    min_time = df.index.get_level_values("open_time").min()
    max_time = df.index.get_level_values("open_time").max()
    logging.info(f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {min_time}")
    logging.info(f"üìÖ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞: {max_time}")

    return df



def run_strategy(strategy, df):
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {strategy.name.upper()}...")
    pf = run_multi_strategy(strategy, df)
    collect_stats_by_symbol(pf, strategy.name)
    save_trades(pf, strategy.name)
    print(f"‚úÖ {str(strategy)} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")


def main():
    df = load_data()
    for strategy in STRATEGIES:
        run_strategy(strategy, df)


if __name__ == "__main__":
    main()

